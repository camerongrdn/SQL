-- Cleaning table 2: Customer Orders
-- Created secondary table with cleaned data to preserve original table and data.
DROP TABLE IF EXISTS customer_orders_cleaned;
CREATE TABLE customer_orders_cleaned AS
SELECT order_id, customer_id, pizza_id,
    CASE WHEN exclusions = 'null' OR exclusions IS NULL THEN ''
    ELSE exclusions
    END AS exclusions,
    CASE WHEN extras = 'null' OR extras IS NULL THEN ''
    ELSE extras
    END AS extras,
order_time
FROM customer_orders;



-- Cleaning table 3: Runner Orders
-- Created secondary table with cleaned data to preserve original table and data.
DROP TABLE IF EXISTS runner_orders_cleaned;
CREATE TABLE runner_orders_cleaned AS
SELECT order_id, runner_id,
    CASE WHEN pickup_time = 'null' THEN ' '
    ELSE pickup_time
    END AS pickup_time,
    CASE WHEN distance = 'null' THEN ' '
    WHEN distance LIKE '%km' THEN TRIM(distance,'km')
    ELSE distance
    END AS distance,
    CASE WHEN duration = 'null' THEN ' '
    WHEN duration LIKE '%mins' THEN TRIM(duration, 'mins')
    WHEN duration LIKE '%minute' THEN TRIM(duration, 'minute')
    WHEN duration LIKE '%minutes' THEN TRIM(duration, 'minutes')
    ELSE duration
    END AS duration,
    CASE WHEN cancellation = 'null' OR cancellation IS NULL THEN ' '
    ELSE cancellation
    END AS cancellation
FROM runner_orders;


-- A. Pizza Metrics
-- 1. How many pizzas were ordered?
SELECT COUNT(*) FROM customer_orders;

-- 2. How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) FROM customer_orders_cleaned;

-- 3. How many successful orders were delivered by each runner?
SELECT runner_id, COUNT(order_id) AS successful_orders
FROM runner_orders_cleaned
WHERE cancellation = ''
GROUP BY runner_id;

-- 4. How many of each type of pizza was delivered?
SELECT customer.pizza_id, pn.pizza_name, COUNT(customer.pizza_id) AS number_of_deliveries
FROM runner_orders_cleaned runner
JOIN customer_orders_cleaned customer ON customer.order_id=runner.order_id
JOIN pizza_names pn ON pn.pizza_id=customer.pizza_id
WHERE runner.distance <> ''
GROUP BY customer.pizza_id;

-- 5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT cust.customer_id, pn.pizza_name, COUNT(cust.pizza_id) AS number_of_orders
FROM customer_orders_cleaned cust
JOIN pizza_names pn ON pn.pizza_id=cust.pizza_id
GROUP BY cust.customer_id, pn.pizza_name;

-- 6. What was the maximum number of pizzas delivered in a single order?
SELECT order_id, MAX(number_of_pizzas) AS pizzas_ordered FROM
(
    SELECT order_id, COUNT(pizza_id) AS number_of_pizzas
    FROM customer_orders_cleaned
    GROUP BY order_id
    ORDER BY number_of_pizzas DESC
)
AS order_count

-- 7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT cust.customer_id,
    SUM(CASE WHEN exclusions <> '' OR extras <> '' THEN 1
    ELSE 0
    END) AS changes,
    SUM(CASE WHEN exclusions = '' AND extras = '' THEN 1
    ELSE 0
    END) AS no_changes
FROM customer_orders_cleaned cust
RIGHT JOIN runner_orders_cleaned runner ON cust.order_id=runner.order_id
WHERE runner.cancellation = ''
GROUP BY cust.customer_id;

-- 8. How many pizzas were delivered that had both exclusions and extras?
SELECT
    SUM(CASE WHEN exclusions <> '' AND extras <> '' THEN 1
    ELSE 0
    END) AS exclusions_and_extras
FROM customer_orders_cleaned cust
RIGHT JOIN runner_orders_cleaned runner ON cust.order_id=runner.order_id
WHERE runner.cancellation = '';


-- B. Runner and Customer Experience
***-- 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
***-- 2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
***-- 3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
-- 4. What was the average distance travelled for each customer?
SELECT cust.customer_id, ROUND(AVG(runner.distance),2) ||' '|| 'km' AS avg_distance
FROM runner_orders_cleaned runner
JOIN customer_orders_cleaned cust
ON cust.order_id=runner.order_id
WHERE distance <> ''
GROUP BY cust.customer_id;

-- 5. What was the difference between the longest and shortest delivery times for all orders?
SELECT (MAX(duration) - MIN(duration)) AS delivery_difference
FROM runner_orders_cleaned
WHERE duration <> '';

***-- 6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
SOMETHING WRONG WITH THE DATA TYPE/INTEGERS IN THE DATA SET WITH SQLITE

***-- 7. What is the successful delivery percentage for each runner?

-- C. Ingredient Optimization
***-- 1. What are the standard ingredients for each pizza?
***-- 2. What was the most commonly added extra?
***-- 3. What was the most common exclusion?
***-- 4. Generate an order item for each record in the customers_orders table in the format of one of the following:
    Meat Lovers
    Meat Lovers - Exclude Beef
    Meat Lovers - Extra Bacon
    Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
***-- 5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
    For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
***-- 6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

-- D. Pricing and Ratings
-- 1. If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes
        - how much money has Pizza Runner made so far if there are no delivery fees?
SELECT SUM(CASE WHEN cust.pizza_id=1 THEN 12
        WHEN cust.pizza_id=2 THEN 10
        END) AS pizza_revenue
FROM customer_orders_cleaned cust
JOIN runner_orders_cleaned runner
ON runner.order_id=cust.order_id
WHERE runner.cancellation = '';

***-- 5. If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras
        and each runner is paid $0.30 per kilometre traveled
        - how much money does Pizza Runner have left over after these deliveries?
COMBINING QUERIES MEANS THAT DISTANCE IS ARTIFICIALLY INFLATED DUE TO MULTIPLE ORDERS -- NOT FINISHED

SELECT SUM(CASE WHEN cust.pizza_id=1 THEN 12
        WHEN cust.pizza_id=2 THEN 10
        END) AS pizza_revenue,
        SUM(runner.distance*0.3) AS runner_pay
FROM customer_orders_cleaned cust
JOIN runner_orders_cleaned runner
ON runner.order_id=cust.order_id
WHERE runner.cancellation = '';

SELECT runner.order_id, runner.distance, SUM(runner.distance) OVER(), SUM(runner.distance*0.3) OVER()
FROM runner_orders_cleaned runner
JOIN customer_orders_cleaned cust
ON runner.order_id=cust.order_id
WHERE cancellation = ''
GROUP BY cust.order_id
