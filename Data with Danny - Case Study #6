-- A. Digital Analysis
-- 1. How many users are there?

SELECT COUNT(DISTINCT user_id) FROM clique_bait.users AS user_count;

-- 2. How many cookies does each user have on average?

SELECT AVG(cookie_count) AS avg_cookie_count FROM
(
SELECT user_id, COUNT(cookie_id) as cookie_count
FROM clique_bait.users
GROUP BY user_id
) AS cookie_data;

-- 3. What is the unique number of visits by all users per month?

SELECT COUNT(DISTINCT visit_id) AS unique_visits, strftime('%m', event_time) AS month
FROM events
GROUP BY strftime('%m', event_time);

-- 4. What is the number of events for each event type?

SELECT id.event_name, COUNT(events.event_type) AS event_count
FROM clique_bait.events events
JOIN clique_bait.event_identifier id ON id.event_type=events.event_type
GROUP BY id.event_name;

-- 5. What is the percentage of visits which have a purchase event?
SELECT 100 * COUNT(DISTINCT e.visit_id) / (SELECT COUNT(DISTINCT visit_id) FROM clique_bait.events) AS purchase_percentage
FROM clique_bait.events e
WHERE event_type=3;

***--- 6. What is the percentage of visits which view the checkout page but do not have a purchase event?

--- 7. What are the top 3 pages by number of views?

SELECT events.page_id, hierarchy.page_name, COUNT(visit_id) AS visit_count
FROM events
JOIN page_hierarchy hierarchy ON events.page_id=hierarchy.page_id
GROUP BY hierarchy.page_name
ORDER BY COUNT(visit_id) DESC LIMIT 3;

-- 8. What is the number of views and cart adds for each product category?

SELECT hierarchy.product_category, COUNT(visit_id) AS visit_count,
    SUM(CASE WHEN id.event_type=2 THEN 1 ELSE 0 END) AS cart_adds
FROM events
JOIN page_hierarchy hierarchy ON events.page_id=hierarchy.page_id
JOIN event_identifier id ON id.event_type=events.event_type
WHERE hierarchy.product_category IS NOT NULL
GROUP BY hierarchy.product_category

-- 9. What are the top 3 products by purchases?

SELECT ph.product_id, ph.page_name, ph.product_category, COUNT(events.visit_id) AS sales
FROM events
JOIN page_hierarchy ph ON ph.page_id=events.page_id
WHERE events.event_type=2
AND events.visit_id IN
    (SELECT events.visit_id
    FROM events
    WHERE events.event_type=3)
GROUP BY ph.product_id, ph.page_name, ph.product_category
ORDER BY COUNT(events.visit_id) DESC
LIMIT 3;

-- B. Product Funnel Analysis 

Using a single SQL query - create a new output table which has the following details:

How many times was each product viewed?
How many times was each product added to cart?
How many times was each product added to a cart but not purchased (abandoned)?
How many times was each product purchased?

WITH products_views_adds AS
(
SELECT ph.product_id, ph.page_name, ph.product_category,
    SUM(CASE WHEN event_type=1 THEN 1 ELSE 0 END) AS views,
    SUM(CASE WHEN event_type=2 THEN 1 ELSE 0 END) AS add_to_cart
FROM events
JOIN page_hierarchy ph ON ph.page_id=events.page_id
WHERE ph.product_id IS NOT NULL
GROUP BY ph.product_id, ph.page_name, ph.product_category
),
products_abandoned AS
(
SELECT ph.product_id, ph.page_name, ph.product_category, COUNT(events.visit_id) AS abandoned
FROM events
JOIN page_hierarchy ph ON ph.page_id=events.page_id
WHERE events.event_type=2
AND events.visit_id NOT IN
(SELECT events.visit_id FROM events
WHERE events.event_type=3)
GROUP BY ph.product_id, ph.page_name, ph.product_category
),
products_purchased AS
(
SELECT ph.product_id, ph.page_name, ph.product_category, COUNT(events.visit_id) AS purchased
FROM events
JOIN page_hierarchy ph ON ph.page_id=events.page_id
WHERE events.event_type=2
AND events.visit_id IN
(SELECT events.visit_id FROM events
WHERE events.event_type=3)
GROUP BY ph.product_id, ph.page_name, ph.product_category
)
SELECT pva.*, pa.abandoned, pp.purchased
FROM products_views_adds pva
JOIN products_abandoned pa ON pa.product_id=pva.product_id
JOIN products_purchased pp ON pp.product_id=pva.product_id

Additionally, create another table which further aggregates the data for the above points but this time for each product category instead of individual products.

WITH products_views_adds AS
(
SELECT ph.product_category,
    SUM(CASE WHEN event_type=1 THEN 1 ELSE 0 END) AS views,
    SUM(CASE WHEN event_type=2 THEN 1 ELSE 0 END) AS add_to_cart
FROM events
JOIN page_hierarchy ph ON ph.page_id=events.page_id
WHERE ph.product_id IS NOT NULL
GROUP BY ph.product_category
),
products_abandoned AS
(
SELECT ph.product_category, COUNT(events.visit_id) AS abandoned
FROM events
JOIN page_hierarchy ph ON ph.page_id=events.page_id
WHERE events.event_type=2
AND events.visit_id NOT IN
(SELECT events.visit_id FROM events
WHERE events.event_type=3)
GROUP BY ph.product_category
),
products_purchased AS
(
SELECT ph.product_category, COUNT(events.visit_id) AS purchased
FROM events
JOIN page_hierarchy ph ON ph.page_id=events.page_id
WHERE events.event_type=2
AND events.visit_id IN
(SELECT events.visit_id FROM events
WHERE events.event_type=3)
GROUP BY ph.product_category
)
SELECT pva.*, pa.abandoned, pp.purchased
FROM products_views_adds pva
JOIN products_abandoned pa ON pa.product_category=pva.product_category
JOIN products_purchased pp ON pp.product_category=pva.product_category

Use your 2 new output tables - answer the following questions:

Which product had the most views, cart adds and purchases?

VIEWS:
SELECT product_id, page_name, product_category, views, add_to_cart, purchased
FROM product_info
ORDER BY views DESC
LIMIT 1;

CART ADDS:
SELECT product_id, page_name, product_category, views, add_to_cart, purchased
FROM product_info
ORDER BY add_to_cart DESC
LIMIT 1;

PURCHASES:
SELECT product_id, page_name, product_category, views, add_to_cart, purchased
FROM product_info
ORDER BY purchased DESC
LIMIT 1;

Which product was most likely to be abandoned?

SELECT product_id, page_name, product_category, abandoned
FROM product_info
ORDER BY abandoned DESC
LIMIT 1;

Which product had the highest view to purchase percentage?

SELECT product_id, page_name, product_category, view_to_purchase_percentage
FROM
(
SELECT product_id, page_name, product_category, views, purchased,
    ROUND(100 * CAST(purchased AS FLOAT)/CAST(views AS FLOAT),2) AS view_to_purchase_percentage
FROM product_info
) AS purchase_data
ORDER BY view_to_purchase_percentage DESC
LIMIT 1

OR

SELECT product_id, page_name, product_category, views, purchased,
    ROUND(100 * CAST(purchased AS FLOAT)/CAST(views AS FLOAT),2) AS view_to_purchase_percentage
FROM product_info
ORDER BY (100 * CAST(purchased AS FLOAT)/CAST(views AS FLOAT)) DESC
LIMIT 1

What is the average conversion rate from view to cart add?

SELECT ROUND(AVG(view_to_cart_add_percentage),2) AS avg_view_to_cart_rate FROM
(
SELECT product_id, page_name, product_category, add_to_cart, views,
    ROUND(100 * CAST(add_to_cart AS FLOAT)/CAST(views AS FLOAT),2) AS view_to_cart_add_percentage
FROM product_info
) AS conversion_data;

What is the average conversion rate from cart add to purchase?

SELECT ROUND(AVG(cart_to_purchase_percentage),2) AS avg_cart_to_purchase_rate FROM
(
SELECT product_id, page_name, product_category, add_to_cart, purchased,
    ROUND(100 * CAST(purchased AS FLOAT)/CAST(add_to_cart AS FLOAT),2) AS cart_to_purchase_percentage
FROM product_info
) AS conversion_data;
