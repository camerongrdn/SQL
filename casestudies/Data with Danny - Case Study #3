-- Source: https://8weeksqlchallenge.com/case-study-3/
-- In this SQL, I'm querying a database (foodie_fi) with 2 datasets (plans, subscriptions) to provide insights on Danny's food-centered media streaming service.
-- Done in SQLite

-- A. Customer Journey
-- 1. Based off the 8 sample customers provided in the sample from the subscriptions table, write a brief description about each customerâ€™s onboarding journey.
SELECT sub.*, p.plan_name, p.price
FROM foodie_fi.subscriptions sub
JOIN foodie_fi.plans p ON p.plan_id=sub.plan_id
WHERE customer_id IN (1,2,11,13,15,16,18,19);

Customer #1 initially signed up for a free trial, then converted to the basic monthly plan once their trial week was over.
Customer #2 initially signed up for a free trial, then converted to the pro annual plan once their trial week was over.
Customer #11 initially signed up for a free trial, then cancelled their subscription entirely once their trial week was over.
Customer #13 initially signed up for a free trial, then converted to the basic monthly plan once their trial week was over.
    About 3 months later, they converted to the pro monthly plan.
Customer #15 initially signed up for a free trial, then converted to the pro monthly plan once their trial week was over.
    About one month later, they cancelled their subscription entirely.
Customer #16 initially signed up for a free trial, then converted to the basic monthly plan once their trial week was over.
    About 4.5 months later, they converted to the pro annual plan.
Customer #18 initially signed up for a free trial, then converted to the pro monthly plan once their trial week was over.
Customer #19 initially signed up for a free trial, then converted to the pro monthly plan once their trial week was over.
    About 2 months later, they converted to the pro annual plan.


-- B. Data Analysis Questions
-- 1. How many customers has Foodie-Fi ever had?
SELECT COUNT(DISTINCT customer_id) as total_customers
FROM foodie_fi.subscriptions;

-- 2. What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value
SELECT strftime('%m', s.start_date) AS month, p.plan_name, COUNT(s.plan_id) AS number_of_customers
FROM foodie_fi.subscriptions s
JOIN foodie_fi.plans p ON s.plan_id=p.plan_id
WHERE p.plan_name = 'trial'
GROUP BY strftime('%m', s.start_date)

-- 3. What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name.
SELECT sub.plan_id, p.plan_name, COUNT(p.plan_name) AS plan_sales
FROM foodie_fi.subscriptions sub
JOIN foodie_fi.plans p ON p.plan_id=sub.plan_id
WHERE sub.start_date>='2021-01-01'
GROUP BY p.plan_name
ORDER BY sub.plan_id;

-- 4. What is the customer count and percentage of customers who have churned rounded to 1 decimal place?
SELECT COUNT(DISTINCT customer_id) AS customer_churn,
    100* CAST(COUNT(DISTINCT customer_id) AS FLOAT)/
    CAST((SELECT COUNT(DISTINCT customer_id) FROM foodie_fi.subscriptions) AS FLOAT) AS churn_percentage
FROM foodie_fi.subscriptions
WHERE plan_id=4

-- 5. How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?
WITH plan_data AS
(
SELECT sub.customer_id, sub.plan_id, p.plan_name,
RANK() OVER (PARTITION BY customer_id ORDER BY sub.start_date) AS plan_rank
FROM subscriptions sub
JOIN plans p on p.plan_id=sub.plan_id
GROUP BY sub.customer_id, sub.plan_id
)
SELECT SUM(CASE WHEN plan_name = 'churn' AND plan_rank = 2 THEN 1 ELSE 0 END) AS customer_churn_count,
    100*
    CAST(SUM(CASE WHEN plan_name = 'churn' AND plan_rank = 2 THEN 1 ELSE 0 END) AS FLOAT) /
    CAST((SELECT COUNT(DISTINCT customer_id) FROM subscriptions) AS FLOAT) AS customer_churn_percentage
FROM plan_data;

-- 6. What is the number and percentage of customer plans after their initial free trial?
WITH plan_conversion_data AS
(
SELECT s.customer_id, s.plan_id, p.plan_name, LEAD(s.plan_id) OVER(PARTITION BY s.customer_id ORDER BY s.plan_id) AS next_plan_id,
LEAD(p.plan_name) OVER(PARTITION BY s.customer_id ORDER BY s.plan_id) AS next_plan_name
FROM subscriptions s
JOIN plans p ON s.plan_id=p.plan_id
)
SELECT next_plan_id AS plan_id, next_plan_name AS plan_name, COUNT(customer_id) AS converted_customers,
    CAST(COUNT(customer_id) AS FLOAT)/CAST((SELECT COUNT(DISTINCT customer_id) FROM subscriptions) AS FLOAT) * 100 AS conversion_percentage
FROM plan_conversion_data
WHERE plan_id=0
GROUP BY next_plan_id;

-- 7. What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?
WITH plan_data AS
(
SELECT s.customer_id, s.plan_id, p.plan_name,
    LEAD(s.start_date) OVER(PARTITION BY s.customer_id ORDER BY s.start_date) AS next_date
FROM subscriptions s
JOIN plans p ON s.plan_id=p.plan_id
WHERE s.start_date <= '2020-12-31'
)
SELECT plan_id, plan_name, COUNT(DISTINCT customer_id) AS customer_count,
    CAST(COUNT(DISTINCT customer_id) AS FLOAT)/CAST((SELECT COUNT(DISTINCT customer_id) FROM subscriptions) AS FLOAT) *100 AS plan_percentage
FROM plan_data
WHERE next_date IS NULL
GROUP BY plan_id;

-- 8. How many customers have upgraded to an annual plan in 2020?
SELECT COUNT(DISTINCT customer_id) AS customer_count
FROM foodie_fi.subscriptions
WHERE plan_id=3
AND start_date BETWEEN '2020-01-01' AND '2020-12-31';

-- 9. How many customers downgraded from a pro monthly to a basic monthly plan in 2020?
WITH plan_data AS
(
SELECT s.customer_id, s.plan_id, p.plan_name, s.start_date,
    LAG(s.plan_id) OVER(PARTITION BY s.customer_id ORDER BY s.plan_id) AS former_plan_id,
    LAG(p.plan_name) OVER(PARTITION BY s.customer_id ORDER BY s.plan_id) AS former_plan_name
FROM subscriptions s
JOIN plans p ON s.plan_id=p.plan_id
)
SELECT COUNT(customer_id) AS customer_conversion
FROM plan_data
WHERE plan_id=1
AND former_plan_id=3
AND start_date LIKE '2020%';
