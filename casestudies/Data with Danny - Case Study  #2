-- Source: https://8weeksqlchallenge.com/case-study-2/
-- In this SQL, I'm querying a database (pizza_runner) with 6 datasets (runner_orders, runners, customer_orders, pizza_names, pizza_recipes, pizza_toppings) to provide insights on Danny's pizza and delivery business.
-- Done in SQLite

-- Cleaning table: Customer Orders
-- Created secondary table with cleaned data to preserve original table and data.
DROP TABLE IF EXISTS pizza_runner.customer_orders_cleaned;
CREATE TABLE pizza_runner.customer_orders_cleaned AS
SELECT order_id, customer_id, pizza_id,
    CASE WHEN exclusions = 'null' OR exclusions IS NULL THEN ''
    ELSE exclusions
    END AS exclusions,
    CASE WHEN extras = 'null' OR extras IS NULL THEN ''
    ELSE extras
    END AS extras,
order_time
FROM pizza_runner.customer_orders;

-- Cleaning table: Runner Orders
-- Created secondary table with cleaned data to preserve original table and data.
DROP TABLE IF EXISTS pizza_runner.runner_orders_cleaned;
CREATE TABLE pizza_runner.runner_orders_cleaned AS
SELECT order_id, runner_id,
    CASE WHEN pickup_time = 'null' THEN ' '
    ELSE pickup_time
    END AS pickup_time,
    CASE WHEN distance = 'null' THEN ' '
    WHEN distance LIKE '%km' THEN TRIM(distance,'km')
    ELSE distance
    END AS distance,
    CASE WHEN duration = 'null' THEN ' '
    WHEN duration LIKE '%mins' THEN TRIM(duration, 'mins')
    WHEN duration LIKE '%minute' THEN TRIM(duration, 'minute')
    WHEN duration LIKE '%minutes' THEN TRIM(duration, 'minutes')
    ELSE duration
    END AS duration,
    CASE WHEN cancellation = 'null' OR cancellation IS NULL THEN ' '
    ELSE cancellation
    END AS cancellation
FROM pizza_runner.runner_orders;


-- A. Pizza Metrics
-- 1. How many pizzas were ordered?
SELECT COUNT(*) FROM pizza_runner.customer_orders_cleaned;

-- 2. How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) FROM pizza_runner.customer_orders_cleaned;

-- 3. How many successful orders were delivered by each runner?
SELECT runner_id, COUNT(order_id) AS successful_orders
FROM pizza_runner.runner_orders_cleaned
WHERE cancellation = ''
GROUP BY runner_id;

-- 4. How many of each type of pizza was delivered?
SELECT customer.pizza_id, pn.pizza_name, COUNT(customer.pizza_id) AS number_of_deliveries
FROM pizza_runner.runner_orders_cleaned runner
JOIN pizza_runner.customer_orders_cleaned customer ON customer.order_id=runner.order_id
JOIN pizza_runner.pizza_names pn ON pn.pizza_id=customer.pizza_id
WHERE runner.distance <> ''
GROUP BY customer.pizza_id;

-- 5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT cust.customer_id, pn.pizza_name, COUNT(cust.pizza_id) AS number_of_orders
FROM pizza_runner.customer_orders_cleaned cust
JOIN pizza_runner.pizza_names pn ON pn.pizza_id=cust.pizza_id
GROUP BY cust.customer_id, pn.pizza_name;

-- 6. What was the maximum number of pizzas delivered in a single order?
SELECT order_id, MAX(number_of_pizzas) AS pizzas_ordered FROM
(
    SELECT order_id, COUNT(pizza_id) AS number_of_pizzas
    FROM pizza_runner.customer_orders_cleaned
    GROUP BY order_id
    ORDER BY number_of_pizzas DESC
)
AS order_count;

-- 7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT cust.customer_id,
    SUM(CASE WHEN exclusions <> '' OR extras <> '' THEN 1
    ELSE 0
    END) AS changes,
    SUM(CASE WHEN exclusions = '' AND extras = '' THEN 1
    ELSE 0
    END) AS no_changes
FROM pizza_runner.customer_orders_cleaned cust
RIGHT JOIN pizza_runner.runner_orders_cleaned runner ON cust.order_id=runner.order_id
WHERE runner.distance <> ''
GROUP BY cust.customer_id;

-- 8. How many pizzas were delivered that had both exclusions and extras?

SELECT
    SUM(CASE WHEN exclusions <> '' AND extras <> '' THEN 1
    ELSE 0
    END) AS exclusions_and_extras
FROM pizza_runner.customer_orders_cleaned cust
RIGHT JOIN pizza_runner.runner_orders_cleaned runner ON cust.order_id=runner.order_id
WHERE runner.distance <> '';


-- B. Runner and Customer Experience
-- 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT registration_week, COUNT(runner_id) AS runner_sign_up_total FROM
(
SELECT runner_id, registration_date,
    CASE WHEN registration_date BETWEEN '2021-01-01' AND DATE('2021-01-01', '+6 days') THEN '2021-01-01'
    WHEN registration_date BETWEEN '2021-01-08' AND DATE('2021-01-08', '+6 days') THEN '2021-01-08'
    WHEN registration_date BETWEEN '2021-01-15' AND DATE('2021-01-15', '+6 days') THEN '2021-01-15'
    END AS registration_week
FROM pizza_runner.runners
) AS reg_data
GROUP BY registration_week;

-- 2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT run.runner_id,
ROUND(AVG((JULIANDAY(run.pickup_time)-JULIANDAY(cust.order_time))*1440),2) AS time_diff
FROM pizza_runner.customer_orders_cleaned cust
JOIN pizza_runner.runner_orders_cleaned run ON cust.order_id=run.order_id
WHERE run.pickup_time <> ''
GROUP BY runner_id;

-- 3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
SELECT number_of_pizzas, ROUND(AVG(prep_time),2) AS avg_prep_time FROM
(
SELECT cust.order_id, COUNT(cust.pizza_id) as number_of_pizzas,
AVG((JULIANDAY(run.pickup_time)-JULIANDAY(cust.order_time))*1440) AS prep_time
FROM pizza_runner.customer_orders_cleaned cust
JOIN pizza_runner.runner_orders_cleaned run ON cust.order_id=run.order_id
WHERE run.pickup_time <> ''
GROUP BY cust.order_id
) AS prep_data
GROUP BY number_of_pizzas;

-- 4. What was the average distance travelled for each customer?
SELECT cust.customer_id, ROUND(AVG(runner.distance),2) ||' '|| 'km' AS avg_distance
FROM pizza_runner.runner_orders_cleaned runner
JOIN pizza_runner.customer_orders_cleaned cust
ON cust.order_id=runner.order_id
WHERE distance <> ''
GROUP BY cust.customer_id;

-- 5. What was the difference between the longest and shortest delivery times for all orders?
SELECT (MAX(duration) - MIN(duration)) AS delivery_difference
FROM pizza_runner.runner_orders_cleaned
WHERE duration <> '';

-- D. Pricing and Ratings
-- 1. If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes
        - how much money has Pizza Runner made so far if there are no delivery fees?
SELECT SUM(CASE WHEN cust.pizza_id=1 THEN 12
        WHEN cust.pizza_id=2 THEN 10
        END) AS pizza_revenue
FROM pizza_runner.customer_orders_cleaned cust
JOIN pizza_runner.runner_orders_cleaned runner
ON runner.order_id=cust.order_id
WHERE runner.distance <> '';
